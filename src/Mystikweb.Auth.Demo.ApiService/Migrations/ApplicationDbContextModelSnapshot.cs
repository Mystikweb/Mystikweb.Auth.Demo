// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Mystikweb.Auth.Demo.ApiService.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Mystikweb.Auth.Demo.ApiService.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Mystikweb.Auth.Demo.ApiService.Data.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("country");

                    b.Property<DateTimeOffset>("InsertAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("insert_at");

                    b.Property<string>("InsertBy")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("insert_by");

                    b.Property<string>("Line1")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("line1");

                    b.Property<string>("Line2")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("line2");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid")
                        .HasColumnName("person_id");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("postal_code");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("state");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasColumnName("timestamp");

                    b.Property<DateTimeOffset?>("UpdateAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_at");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("update_by");

                    b.HasKey("Id")
                        .HasName("pk_address_id");

                    b.HasIndex("PersonId")
                        .HasDatabaseName("ix_address_person_id");

                    b.ToTable("address", "AddressBook");
                });

            modelBuilder.Entity("Mystikweb.Auth.Demo.ApiService.Data.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("birth_date");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("first_name");

                    b.Property<DateTimeOffset>("InsertAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("insert_at");

                    b.Property<string>("InsertBy")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("insert_by");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("last_name");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasColumnName("timestamp");

                    b.Property<DateTimeOffset?>("UpdateAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_at");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("update_by");

                    b.HasKey("Id")
                        .HasName("pk_person_id");

                    b.ToTable("person", "AddressBook");
                });

            modelBuilder.Entity("Mystikweb.Auth.Demo.ApiService.Data.Address", b =>
                {
                    b.HasOne("Mystikweb.Auth.Demo.ApiService.Data.Person", "Person")
                        .WithMany("Addresses")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_person_address");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Mystikweb.Auth.Demo.ApiService.Data.Person", b =>
                {
                    b.Navigation("Addresses");
                });
#pragma warning restore 612, 618
        }
    }
}
